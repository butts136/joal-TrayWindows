name: Test & deploy

on:
  push:
    branches: [ master ]
    tags:
      - '**'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        
    - name: Cache
      uses: actions/cache@v4
      with:
        path: /home/runner/.m2/repository
        key: ${{ runner.os }}-${{ hashFiles('pom.xml') }}
        
    - name: Build with Maven
      run: mvn -B test --file pom.xml

  github-release:
    needs: test
    if: startsWith(github.ref, 'refs/tags/') # run this step only when tagged
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        
    - name: Cache
      uses: actions/cache@v4
      with:
        path: /home/runner/.m2/repository
        key: ${{ runner.os }}-${{ hashFiles('pom.xml') }}
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml -DskipTests=true
    
    - name: Create release archive
      run: |
        mkdir packager-tmp && cp -r resources/* ./packager-tmp && cp target/*.jar ./packager-tmp
        cd ./packager-tmp && tar -czvf joal.tar.gz * && mv ./joal.tar.gz ../ && cd ..

    - name: Create Github release
      uses: ncipollo/release-action@v1.8.6
      with:
        allowUpdates: true
        artifactErrorsFailBuild: true
        artifacts: "joal.tar.gz"
        draft: true
        token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Prepare
      id: prep
      run: |
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          echo "DOCKER_USERNAME secret is not set. Please set it in your repository secrets." >&2
          exit 1
        fi
        DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/${GITHUB_REPOSITORY#*/}"
        VERSION=latest
        SHORTREF=${GITHUB_SHA::8}

        # If this is git tag, use the tag name as a docker tag
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${SHORTREF}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"

        # If the VERSION looks like a version number, assume that
        # this is the most recent version of the image and also
        # tag it 'latest'.
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:latest"
        fi

        # Set output parameters using environment files (not deprecated set-output)
        echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"
        echo "docker_image=${DOCKER_IMAGE}" >> "$GITHUB_OUTPUT"

    - name: Set up QEMU
      uses: docker/setup-qemu-action@master
      with:
        platforms: all

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master

    - name: Login to DockerHub
      if: ${{ github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') }}
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: ${{ startsWith(github.ref, 'refs/tags/') }}
        tags: ${{ steps.prep.outputs.tags }}
